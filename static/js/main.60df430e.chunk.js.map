{"version":3,"sources":["components/Navbar.tsx","components/Layout.tsx","pages/HomePage.tsx","components/PersonLink.tsx","components/PersonInfo.tsx","components/PeopleTable.tsx","types/NotificationType.ts","api.ts","components/Loader/Loader.tsx","components/Notification.tsx","pages/PeoplePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Navbar","getLinkClasses","isActive","classNames","className","role","to","Layout","HomePage","PersonLink","sex","person","slug","name","PersonInfo","searchedPerson","personMother","motherName","personFather","fatherName","useParams","born","died","PeopleTable","people","personName","find","map","NotificationType","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","Notification","type","LoadingError","PeoplePage","useState","setPeople","isError","setIsError","isLoading","setIsLoading","useEffect","peopleData","catch","finally","peopleLoaded","isEmptyPeopleList","length","NoPeopple","NotFoundPage","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.60df430e.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar: FC = () => {\n  const getLinkClasses = ({ isActive }: { isActive: boolean }) => (\n    classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })\n  );\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getLinkClasses}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to=\"people\"\n            className={getLinkClasses}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { FC } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './Navbar';\n\nexport const Layout: FC = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\nexport const HomePage: FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const getTextColor = (sex: 'f' | 'm') => (\n    classNames({\n      'has-text-danger': sex === 'f',\n    })\n  );\n\n  return (\n    <Link\n      to={`../${person.slug}`}\n      className={getTextColor(person.sex)}\n    >\n      {person.name || '-'}\n    </Link>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { PersonLink } from './PersonLink';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person;\n  searchedPerson: (personName: string | null) => Person | null;\n};\n\nexport const PersonInfo: FC<Props> = ({ person, searchedPerson }) => {\n  const personMother = searchedPerson(person.motherName);\n  const personFather = searchedPerson(person.fatherName);\n\n  const { slug } = useParams();\n\n  return (\n    <>\n      <tr\n        data-cy=\"person\"\n        className={classNames({\n          'has-background-warning': person.slug === slug,\n        })}\n      >\n        <td>\n          <PersonLink person={person} />\n        </td>\n\n        <td>{person.sex}</td>\n        <td>{person.born}</td>\n        <td>{person.died}</td>\n\n        <td>\n          {personMother ? (\n            <PersonLink person={personMother} />\n          ) : (\n            person.motherName || '-'\n          )}\n        </td>\n\n        <td>\n          {personFather ? (\n            <PersonLink person={personFather} />\n          ) : (\n            person.fatherName || '-'\n          )}\n        </td>\n      </tr>\n    </>\n  );\n};\n","import { FC } from 'react';\nimport { Person } from '../types';\nimport { PersonInfo } from './PersonInfo';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: FC<Props> = ({ people }) => {\n  const searchedPerson = (personName: string | null) => (\n    people.find(person => person.name === personName) || null\n  );\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonInfo\n            person={person}\n            searchedPerson={searchedPerson}\n            key={person.slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","export enum NotificationType {\n  LoadingError = 'peopleLoadingError',\n  NoPeopple = 'noPeopleMessage',\n}\n","import { Person } from './types';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NotificationType } from '../types';\n\ntype Props = {\n  type: NotificationType;\n};\n\nexport const Notification: FC<Props> = ({ type }) => (\n  <p\n    data-cy={type}\n    className={classNames({\n      'has-text-danger': type === NotificationType.LoadingError,\n    })}\n  >\n    {\n      type === NotificationType.LoadingError\n        ? 'Something went wrong'\n        : 'There are no people on the server'\n    }\n  </p>\n);\n","import { FC, useState, useEffect } from 'react';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person, NotificationType } from '../types';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { Notification } from '../components/Notification';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsError(false);\n\n    getPeople()\n      .then((peopleData) => setPeople(peopleData))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const peopleLoaded = !isLoading && !isError;\n\n  const isEmptyPeopleList = !isError\n    && !isLoading\n    && people.length === 0;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {isError && (\n            <Notification type={NotificationType.LoadingError} />\n          )}\n\n          {isEmptyPeopleList && (\n            <Notification type={NotificationType.NoPeopple} />\n          )}\n\n          {peopleLoaded && (\n            <PeopleTable people={people} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { FC } from 'react';\n\nexport const NotFoundPage: FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Route, Routes, Navigate } from 'react-router-dom';\nimport { Layout } from './components/Layout';\nimport { HomePage } from './pages/HomePage';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport './App.scss';\n\nexport const App = () => (\n  <Routes>\n    <Route path=\"/\" element={<Layout />}>\n      <Route index element={<HomePage />} />\n      <Route path=\"home\" element={<Navigate to=\"..\" replace />} />\n\n      <Route path=\"people\">\n        <Route index element={<PeoplePage />} />\n        <Route path=\":slug\" element={<PeoplePage />} />\n      </Route>\n\n      <Route path=\"*\" element={<NotFoundPage />} />\n    </Route>\n  </Routes>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}